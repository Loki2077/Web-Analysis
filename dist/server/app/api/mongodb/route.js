(()=>{var e={};e.id=24,e.ids=[24],e.modules={846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},2518:e=>{"use strict";e.exports=require("mongodb")},3033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},4870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},6331:(e,s,t)=>{"use strict";t.d(s,{Fd:()=>l,IM:()=>d,Pf:()=>u,kY:()=>c});var r=t(2518);let a=process.env.MONGODB_URI,n=process.env.MONGODB_DB,i=null,o=null;async function c(e){return i?e&&o?.databaseName!==e&&(o=i.db(e)):(i=new r.MongoClient(a),await i.connect(),o=i.db(e||n)),o}async function u(){let e=new r.MongoClient(a);return await e.connect(),(await e.db().admin().listDatabases()).databases.map(e=>e.name)}async function d(e){let s=await c(e);return(await s.listCollections().toArray()).map(e=>e.name)}async function l(e,s,t={}){return new r.MongoClient(a),(await c(e)).collection(s).find(t).toArray()}},6487:()=>{},8335:()=>{},9294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},9787:(e,s,t)=>{"use strict";t.r(s),t.d(s,{patchFetch:()=>b,routeModule:()=>p,serverHooks:()=>m,workAsyncStorage:()=>f,workUnitAsyncStorage:()=>g});var r={};t.r(r),t.d(r,{GET:()=>d,POST:()=>l});var a=t(6559),n=t(8088),i=t(7719),o=t(2190),c=t(6331),u=t(2518);async function d(e){try{let s,{searchParams:t}=new URL(e.url),r=t.get("action")||"listDatabases",a=t.get("dbName"),n=t.get("collectionName");switch(r){case"listDatabases":s=await (0,c.Pf)();break;case"listCollections":if(!a)return o.NextResponse.json({success:!1,message:"dbName is required for listCollections action"},{status:400});s=await (0,c.IM)(a);break;case"fetchData":if(!a||!n)return o.NextResponse.json({success:!1,message:"dbName and collectionName are required for fetchData action"},{status:400});let i=t.get("query"),u=i?JSON.parse(i):{};s=await (0,c.Fd)(a,n,u);break;default:return o.NextResponse.json({success:!1,message:"Invalid GET action"},{status:400})}return o.NextResponse.json({success:!0,data:s})}catch(e){return console.error("[MongoDB API] Error processing GET request:",e),o.NextResponse.json({success:!1,message:"Internal server error"},{status:500})}}async function l(e){try{let s,{action:t,dbName:r,collectionName:a,document:n,documents:i,filter:d,update:l}=await e.json();if(!t||!r||!a)return o.NextResponse.json({success:!1,message:"action, dbName, and collectionName are required in request body"},{status:400});let p=(await (0,c.kY)(r)).collection(a);switch(t){case"insertOne":if(!n)return o.NextResponse.json({success:!1,message:"document is required for insertOne action"},{status:400});s=await p.insertOne(n);break;case"insertMany":if(!i||!Array.isArray(i))return o.NextResponse.json({success:!1,message:"documents (array) is required for insertMany action"},{status:400});s=await p.insertMany(i);break;case"updateOne":if(!d||!l)return o.NextResponse.json({success:!1,message:"filter and update are required for updateOne action"},{status:400});if(d._id&&"string"==typeof d._id)try{d._id=new u.ObjectId(d._id)}catch(e){return console.warn("[MongoDB API] Invalid ObjectId string in filter:",d._id),o.NextResponse.json({success:!1,message:"Invalid ObjectId format in filter"},{status:400})}s=await p.updateOne(d,l);break;case"updateMany":if(!d||!l)return o.NextResponse.json({success:!1,message:"filter and update are required for updateMany action"},{status:400});if(d._id&&"string"==typeof d._id)try{d._id=new u.ObjectId(d._id)}catch(e){console.warn("[MongoDB API] Invalid ObjectId string in filter:",d._id)}s=await p.updateMany(d,l);break;case"deleteOne":if(!d)return o.NextResponse.json({success:!1,message:"filter is required for deleteOne action"},{status:400});if(d._id&&"string"==typeof d._id)try{d._id=new u.ObjectId(d._id)}catch(e){return console.warn("[MongoDB API] Invalid ObjectId string in filter:",d._id),o.NextResponse.json({success:!1,message:"Invalid ObjectId format in filter"},{status:400})}s=await p.deleteOne(d);break;case"deleteMany":if(!d)return o.NextResponse.json({success:!1,message:"filter is required for deleteMany action"},{status:400});if(d._id&&"string"==typeof d._id)try{d._id=new u.ObjectId(d._id)}catch(e){console.warn("[MongoDB API] Invalid ObjectId string in filter:",d._id)}s=await p.deleteMany(d);break;default:return o.NextResponse.json({success:!1,message:"Invalid POST action"},{status:400})}return o.NextResponse.json({success:!0,data:s})}catch(e){return console.error("[MongoDB API] Error processing POST request:",e),o.NextResponse.json({success:!1,message:"Internal server error"},{status:500})}}let p=new a.AppRouteRouteModule({definition:{kind:n.RouteKind.APP_ROUTE,page:"/api/mongodb/route",pathname:"/api/mongodb",filename:"route",bundlePath:"app/api/mongodb/route"},resolvedPagePath:"E:\\WorkSpace\\Trea_ai\\web-analysis-v2.0.0\\src\\app\\api\\mongodb\\route.ts",nextConfigOutput:"",userland:r}),{workAsyncStorage:f,workUnitAsyncStorage:g,serverHooks:m}=p;function b(){return(0,i.patchFetch)({workAsyncStorage:f,workUnitAsyncStorage:g})}}};var s=require("../../../webpack-runtime.js");s.C(e);var t=e=>s(s.s=e),r=s.X(0,[447,580],()=>t(9787));module.exports=r})();